package guru.bug.austras.codetempl.parser;

import guru.bug.austras.codetempl.parser.tokenizer.TemplateToken;
import guru.bug.austras.codetempl.parser.tokenizer.TemplateTokenizer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;

class TemplateTokenizerTest {

    @Test
    void tokens() throws Exception {
        try (var is = getClass().getResourceAsStream("/guru/bug/austras/codetempl/test/simple_test_template.txt");
             var r = new InputStreamReader(is);
             var br = new BufferedReader(r)) {
            var str = new StringWriter(2048);
            br.transferTo(str);
            TemplateTokenizer tt = new TemplateTokenizer();
            var tokens = tt.process(str.toString());
            var idx = 0;
            assertEquals("package ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("TARGET.PACKAGE", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(";", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("import guru.bug.austras.convert.converters.JsonConverter;", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("import guru.bug.austras.convert.json.reader.JsonValueReader;", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("import guru.bug.austras.convert.json.writer.JsonValueWriter;", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("import guru.bug.austras.core.Component;", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("@Component", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("public class ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("TARGET.SIMPLE_NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("ToJsonConverter implements JsonConverter<", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("TARGET", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("> {", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("LOOP CNV : CONVERTERS", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    private ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("CNV.TYPE", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(" ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("CNV.NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(";", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("END", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    public FakeDtoToJsonConverter(", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("LOOP CNV : CONVERTERS", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals("CNV.VALUE.TYPE", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(" ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("CNV.NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("CNV.IS_LAST?:\", \"", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("END", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(") {", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("        ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("LOOP CNV : CONVERTERS", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("        this.", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("CNV.VALUE.NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(" = ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("CNV.VALUE.NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(";", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("        ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("END", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    }", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    @Override", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    public void toJson(", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("TARGET", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(" value, JsonValueWriter writer) {", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("        writer.writeObject(value, (obj, out) -> {", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("            ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("LOOP PROP : PROPERTIES", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("            out.write(\"", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("PROP.VALUE.NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("\", obj.", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("PROP.VALUE.GETTER_NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("(), ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("PROP.VALUE.CONVERTER.NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(";", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("            ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("END", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("        });", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    }", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    @Override", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    public ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("TARGET", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(" fromJson(JsonValueReader reader) {", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("        return reader.readObject(", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("TARGET", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("::new, (obj, key, in) -> {", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("            switch (key) {", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("                ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("LOOP PROP : PROPERTIES", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("                case \"", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("PROP.VALUE.NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("\":", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("                    obj.", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("PROP.VALUE.SETTER_NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals("(r.read(", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("PROP.VALUE.CONVERTER.NAME", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.EXPRESSION, tokens.get(idx).getType());
            idx++;
            assertEquals(").orElse(null));", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("                    break;", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("                ", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals("END", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.COMMAND, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("            }", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("        }).orElse(null);", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("    }", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
            idx++;
            assertEquals(TemplateToken.Type.NEW_LINE, tokens.get(idx).getType());
            idx++;
            assertEquals("}", tokens.get(idx).getValue());
            assertEquals(TemplateToken.Type.TEXT, tokens.get(idx).getType());
        }
    }

    @Test
    @Disabled
    void printTokens() throws Exception {
        try (var is = getClass().getResourceAsStream("/guru/bug/austras/codetempl/test/simple_test_template.txt");
             var r = new InputStreamReader(is);
             var br = new BufferedReader(r)) {
            TemplateTokenizer tt = new TemplateTokenizer();
            var str = new StringWriter(2048);
            br.transferTo(str);
            var idx = -1;
            for (var t : tt.process(str.toString())) {
                idx++;
                System.out.printf("assertEquals(\"%s\", tokens.get(%d).getValue());\n", escape(t.getValue()), idx);
                System.out.printf("assertEquals(Token.Type.%s, tokens.get(%d).getType());\n", t.getType(), idx);
            }
        }
    }

    private String escape(String value) {
        return value.codePoints()
                .mapToObj(cp -> {
                    switch (cp) {
                        case '\n':
                            return "\\n";
                        case '\t':
                            return "\\t";
                        case '\r':
                            return "\\r";
                        case '\b':
                            return "\\b";
                        case '\\':
                            return "\\\\";
                        case '"':
                            return "\\\"";
                        default:
                            return Character.toString(cp);
                    }
                })
                .collect(Collectors.joining());
    }

}