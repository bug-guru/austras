#IMPORTS#
org.slf4j.Logger
org.slf4j.LoggerFactory
java.util.Collection
guru.bug.austras.core.Selector
java.util.List
guru.bug.austras.startup.ServiceManager
jakarta.servlet.ServletContextListener
jakarta.servlet.ServletContextEvent
jakarta.servlet.annotation.WebListener
#END#

@WebListener
public class $SIMPLE_CLASS_NAME$ implements ServletContextListener {
    public static final Logger LOGGER = LoggerFactory.getLogger($QUALIFIED_CLASS_NAME$.class);
    private ServiceManager $STARTER_COMPONENT_NAME$;

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        var _t1 = System.nanoTime();
        LOGGER.info("Application is starting up...");
        #COMPONENTS#

        LOGGER.info("Initializing component $COMPONENT_NAME$");
        #WITH_DEPENDENCIES#
        var $COMPONENT_NAME$ = new $COMPONENT_CLASS$(
            #COMPONENT_DEPENDENCIES#
                $DEPENDENCY$$,$
            #END#
        );
        #END#
        #WITHOUT_DEPENDENCIES#
        var $COMPONENT_NAME$ = new $COMPONENT_CLASS$();
        #END#
        #END#

        LOGGER.info("Starting services...");
        this.$STARTER_COMPONENT_NAME$ = $STARTER_COMPONENT_NAME$;
        $STARTER_COMPONENT_NAME$.initAll(sce.getServletContext());

        var _t2 = System.nanoTime();
        if (LOGGER.isInfoEnabled()) {
            LOGGER.info("Application is started up in {} ms", (_t2 - _t1) / 1_000_000.0);
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        LOGGER.info("Stopping services...");
        $STARTER_COMPONENT_NAME$.destroyAll(sce.getServletContext());
    }
}