package $PACKAGE_NAME$;

#IMPORTS#
JsonValueWriter
guru.bug.austras.web.EndpointHandler
guru.bug.austras.web.MediaType
guru.bug.austras.web.PathItem
javax.servlet.ServletException
javax.servlet.http.HttpServletRequest
javax.servlet.http.HttpServletResponse
java.io.IOException
java.util.List
java.util.Map
guru.bug.austras.web.errors.NotAcceptableException
#END#

public class $SIMPLE_NAME$ extends EndpointHandler {
    #DEPENDENCIES#
    private final $DEPENDENCY_TYPE$ $DEPENDENCY_NAME$;
    #END#

    public $SIMPLE_NAME$(
        #DEPENDENCIES#
        $DEPENDENCY_QUALIFIERS$ $DEPENDENCY_TYPE$ $DEPENDENCY_NAME$$,$
        #END#
    ) {
        super("$METHOD$",
                List.of(
                    #PATH_ITEMS#
                        PathItem.$PATH_ITEM_TYPE$("$PATH_ITEM_VALUE$")$,$
                    #END#
                )
        );
        #DEPENDENCIES#
        this.$DEPENDENCY_NAME$ = $DEPENDENCY_NAME$;
        #END#
    }

    @Override
    public void handle(HttpServletRequest request, Map<String, String> pathParams, HttpServletResponse response) throws IOException, ServletException {
        #HAS_RESPONSE#
        var selectedResponseConverter =
                selectResponseContentType($RESPONSE_CONVERTER_SELECTOR_NAME$, request)
                        .orElseThrow(NotAcceptableException::new);
        #END#
        try (var out = response.getWriter()) {
            response.setStatus($SUCCESS_STATUS$);
            #HAS_RESPONSE#var result = #END#$CONTROLLER_DEPENDENCY_NAME$.$ENDPOINT_METHOD$(
                #ENDPOINT_METHOD_PARAMS#
                    $ENDPOINT_METHOD_PARAM_EXPRESSION$$,$
                #END#
            );
            #HAS_RESPONSE#
            response.setCharacterEncoding("UTF-8");
            selectedResponseConverter.getConverter().write(result, out);
            #END#
        }
    }
}
